#!/bin/python3
import os, glob, re
from pathlib import Path

class Problem(object):
    def __init__(self, file, text, line_number=None, line_text=None):
        self.file = file
        self.text = text
        self.line_number = line_number #0 indexed!
        self.line_text = line_text

    def __str__(self):
        if self.line_number is not None:
            fmt = '{file_name}:{line_number}: {line_text} - {problem_text}'
        else:
            fmt = '{file_name}: {problem_text}'
        return fmt.format(
            file_name=self.file.name,
            line_number=self.line_number+1 if self.line_number else None,
            line_text=self.line_text,
            problem_text=self.text)

class File(object):
    def __init__(self, dir, name, lines):
        self.dir = dir
        self.name = name
        self.lines = lines

class Check(object):
    def scan(self, file):
        raise RuntimeError('Not implemented')

class WhitespaceCheck(Check):
    def scan(self, file):
        if file.lines and file.lines[-1] == '':
            yield Problem(file, 'Extra blank line at EOF')
        for i, line in enumerate(file.lines):
            if line.endswith(' '):
                yield Problem(file, 'Extra whitespace near EOL', i, line)
        for i, line in enumerate(file.lines):
            if '\t' in line:
                yield Problem(file, 'Use spaces rather than tabs', i, line)
            if '\r' in line:
                yield Problem(file, 'Don\'t use CR in EOLs', i, line)

# I'd advise against BOM in a heartbeat, unfortunately MSVC slams door so hard
# for files without BOM that the sound of it can be heard from the outer space
class Utf8BomCheck(Check):
    def scan(self, file):
        try:
            ''.join(file.lines).encode('ascii')
        except UnicodeEncodeError:
            with open(file.name, 'rb') as fh:
                if fh.read(3) != b'\xEF\xBB\xBF':
                    yield Problem(file, 'Non-ASCII files must have BOM')

class NonConstExceptionsCheck(Check):
    def scan(self, file):
        for i, line in enumerate(file.lines):
            if ('catch' in line
            and '(' in line
            and not '...' in line
            and not 'const' in line):
                yield Problem(file, 'Make exceptions const in catch (...)', i, line)

class BadCommentsCheck(Check):
    def scan(self, file):
        for i, line in enumerate(file.lines):
            if '/*' in line:
                yield Problem(file, 'Use short comments (//)', i, line)

class LongLinesCheck(Check):
    def scan(self, file):
        for i, line in enumerate(file.lines):
            if len(line) > 80:
                yield Problem(file, 'Line too long', i, line)

class LowercaseHexLiteralsCheck(Check):
    def __init__(self):
        self.regex = re.compile(r'([0\\]x[0-9A-F]*[a-f][0-9A-Fa-f]*)')

    def scan(self, file):
        for i, line in enumerate(file.lines):
            match = self.regex.search(line)
            if match is not None:
                yield Problem(
                    file,
                    'Hex literals must be uppercase ({0})'.format(match.group()),
                    i,
                    line)

class WhitespaceAroundPointersCheck(Check):
    def __init__(self):
        self.regex = re.compile(r'[^ &][&\*] ')

    def scan(self, file):
        for i, line in enumerate(file.lines):
            match = self.regex.search(line)
            if match is not None and '//' not in line:
                yield Problem(
                    file,
                    'Put spaces before, not after * and &'.format(match.group()),
                    i,
                    line)

class ClassInitializerListStyleCheck(Check):
    def __init__(self):
        self.regex = re.compile(r'^ *:.*,$')

    def scan(self, file):
        for i, line in enumerate(file.lines):
            match = self.regex.match(line)
            if match is not None and '?' not in file.lines[i - 1]:
                yield Problem(
                    file,
                    'Put : in the previous line'.format(match.group()),
                    i,
                    line)

class TypedefCheck(Check):
    def scan(self, file):
        for i, line in enumerate(file.lines):
            if 'typedef' in line:
                yield Problem(file, 'typedef must not be used', i, line)

class LengthCheck(Check):
    def scan(self, file):
        for i, line in enumerate(file.lines):
            if 'length' in line and 'run_length' not in line:
                yield Problem(file, 'use "size" instead of "length"', i, line)

class IostreamCheck(Check):
    def scan(self, file):
        if 'logger' in file.name:
            return
        for i, line in enumerate(file.lines):
            if 'iostream' in line:
                yield Problem(file, 'Don\'t use iostream', i, line)

class WhitespaceAroundBracesCheck(Check):
    def __init__(self):
        self.initializer_list_regex1 = re.compile(r'[({] [0-9"]') # start
        self.initializer_list_regex2 = re.compile(r'[0-9"] [})]') # end
        self.initializer_list_regex3 = re.compile('[]=] *{  *}') # empty

    def scan(self, file):
        for i, line in enumerate(file.lines):
            if self.initializer_list_regex1.search(line) is not None \
            or self.initializer_list_regex2.search(line) is not None \
            or self.initializer_list_regex3.search(line) is not None:
                yield Problem(file, 'Extra spaces in initializer list', i, line)

class SloppyExceptionsCheck(Check):
    def scan(self, file):
        for i, line in enumerate(file.lines):
            if 'throw std::' in line \
            and 'logic_error' not in line \
            and 'bad_malloc' not in line:
                yield Problem(file, 'Use better exceptions', i, line)

class NonFinalObjectsCheck(Check):
    def scan(self, file):
        for i, line in enumerate(file.lines):
            if 'struct ' not in line and 'class ' not in line: continue
            if 'final' in line: continue

            # generic exceptions
            if (line.endswith(';') # forward declarations
            or '_struct' in line # false positives I
            or 'pngstruct' in line # false positives II
            or 'enum class' in line # false positives III
            or re.search('(class|struct) (Base|I)[A-Z]', line)
            or re.search('template<(class|struct)', line)): continue

            # exceptions for core classes
            if (re.search('(class|struct) (General|Data|Io|NotSupported)Error', line)
            or re.search('(class|struct) Grid', line) and 'grid.' in file.name
            or re.search('(class|struct) (Switch|Flag|Option)', line) and 'arg_parser.' in file.name
            or re.search('(class|struct) .*Archive(Entry|Meta)', line) and 'archive_decoder.h' in file.name): continue

            yield Problem(file, 'Use "final" where possible', i, line)

class NonStaticObjectsCheck(Check):
    def __init__(self):
        self.regex = re.compile(r'^[A-Z0-9a-z:<>_]{1,} [^:]*[(;]')

    def scan(self, file):
        if 'entry_point' in file.name:
            return
        for i, line in enumerate(file.lines):
            if self.regex.search(line):
                if 'static' in line: continue
                if 'using namespace' in line: continue
                if 'int main' in line: continue
                yield Problem(file, 'Use "static" where possible', i, line)

class IncludesCheck(Check):
    def __init__(self):
        self.regex = re.compile(r'(["<].*[>"])')

    def scan(self, file):
        includes = [self.regex.findall(line)[0]
                    for line in file.lines
                    if line.startswith('#include')]

        if '.cc' in file.name:
            base = re.sub('(_test)?\.cc', '', file.name)
            base1 = os.path.relpath(base, file.dir)
            base2 = base1[0:base1.rfind('_')] if '_' in base1 else base1
            candidates = ['"%s.h"' % x for x in [base1, base2]]
            filtered = [x for x in candidates if x in includes]
            main_header = filtered[0] if filtered else None
        else:
            main_header = None

        if main_header in includes and includes[0] != main_header:
            yield Problem(file, 'Primary header must be #included as first')
            return

        system_includes = [x for x in includes if x.startswith('<')]
        program_includes = [x for x in includes if x.startswith('"')]

        includes_good = (
            ([main_header] if main_header in includes else []) +
            sorted(system_includes) +
            sorted([x for x in program_includes if x != main_header]))

        if includes != includes_good:
            yield Problem(file, 'Unsorted includes')

class DebugLogCheck(Check):
    def scan(self, file):
        if 'benchmark' in file.name:
            return
        for i, line in enumerate(file.lines):
            if '.debug(' in line:
                yield Problem(
                    file, 'Don\'t use Logger.debug() in production code', i, line)

class CommentWhitespaceCheck(Check):
    def __init__(self):
        self.regex = re.compile('(?<!http:)(?<!https:)\/\/[^ ]')

    def scan(self, file):
        for i, line in enumerate(file.lines):
            if self.regex.search(line):
                yield Problem(file, 'Use spaces after //', i, line)

class GplPreambleCheck(Check):
    def scan(self, file):
        count = False
        for line in file.lines:
            if re.search('Copyright.*rr-', line):
                count += 1
        if count == 0:
            yield Problem(file, 'Missing copyright preamble')
        if count > 1:
            yield Problem(file, 'Duplicated copyright preamble')

def main():
    checks = [cls() for cls in Check.__subclasses__()]

    dirs = ['src/', 'tests/']
    all_files = []
    for dir in dirs:
        sources = [str(p) for p in sorted(Path(dir).glob('**/*.cc'))]
        headers = [str(p) for p in sorted(Path(dir).glob('**/*.h'))]
        headers = [f for f in headers if 'catch.h' not in f]

        for name in sorted(sources + headers):
            with open(name, 'rb') as f:
                lines = [l.decode('utf-8').rstrip('\n') for l in f.readlines()]
            file = File(dir, name, lines)
            all_files.append(file)

    for check in checks:
        for file in all_files:
            for problem in check.scan(file):
                print(problem)

if __name__ == '__main__':
    main()
